(function() {var type_impls = {
"secp256k1":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/secret.rs.html#144-178\">source</a><a href=\"#impl-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.display_secret\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/secret.rs.html#175-177\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.display_secret\" class=\"fn\">display_secret</a>(&amp;self) -&gt; DisplaySecret</h4></section></summary><div class=\"docblock\"><p>Formats the explicit byte value of the secret key kept inside the type as a\nlittle-endian hexadecimal string using the provided formatter.</p>\n<p>This is the only method that outputs the actual secret key value, and, thus,\nshould be used with extreme precaution.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::ONE_KEY;\n<span class=\"kw\">use </span>secp256k1::KeyPair;\n<span class=\"kw\">use </span>secp256k1::Secp256k1;\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>key = ONE_KEY;\n<span class=\"kw\">let </span>key = KeyPair::from_secret_key(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>key);\n<span class=\"comment\">// Here we explicitly display the secret value:\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"0000000000000000000000000000000000000000000000000000000000000001\"</span>,\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, key.display_secret())\n);\n<span class=\"comment\">// Also, we can explicitly display with `Debug`:\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, key.display_secret()),\n    <span class=\"macro\">format!</span>(<span class=\"string\">\"DisplaySecret(\\\"{}\\\")\"</span>, key.display_secret())\n);</code></pre></div>\n</div></details></div></details>",0,"secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#812-1026\">source</a><a href=\"#impl-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#815-817\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const </a><a class=\"struct\" href=\"secp256k1_sys/struct.KeyPair.html\" title=\"struct secp256k1_sys::KeyPair\">KeyPair</a></h4></section></summary><div class=\"docblock\"><p>Obtains a raw const pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#821-823\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"struct\" href=\"secp256k1_sys/struct.KeyPair.html\" title=\"struct secp256k1_sys::KeyPair\">KeyPair</a></h4></section></summary><div class=\"docblock\"><p>Obtains a raw mutable pointer suitable for use with FFI functions.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_secret_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#827-839\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.from_secret_key\" class=\"fn\">from_secret_key</a>&lt;C: <a class=\"trait\" href=\"secp256k1/trait.Signing.html\" title=\"trait secp256k1::Signing\">Signing</a>&gt;(\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    sk: &amp;<a class=\"struct\" href=\"secp256k1/struct.SecretKey.html\" title=\"struct secp256k1::SecretKey\">SecretKey</a>\n) -&gt; <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a> directly from a Secp256k1 secret key.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_seckey_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#848-864\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.from_seckey_slice\" class=\"fn\">from_seckey_slice</a>&lt;C: <a class=\"trait\" href=\"secp256k1/trait.Signing.html\" title=\"trait secp256k1::Signing\">Signing</a>&gt;(\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a> directly from a secret key slice.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p><a href=\"secp256k1/enum.Error.html#variant.InvalidSecretKey\" title=\"variant secp256k1::Error::InvalidSecretKey\"><code>Error::InvalidSecretKey</code></a> if the provided data has an incorrect length, exceeds Secp256k1\nfield <code>p</code> value or the corresponding public key is not even.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_seckey_str\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#872-880\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.from_seckey_str\" class=\"fn\">from_seckey_str</a>&lt;C: <a class=\"trait\" href=\"secp256k1/trait.Signing.html\" title=\"trait secp256k1::Signing\">Signing</a>&gt;(\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a> directly from a secret key string.</p>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<p><a href=\"secp256k1/enum.Error.html#variant.InvalidSecretKey\" title=\"variant secp256k1::Error::InvalidSecretKey\"><code>Error::InvalidSecretKey</code></a> if corresponding public key for the provided secret key is not even.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_seckey_str_global\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#890-892\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.from_seckey_str_global\" class=\"fn\">from_seckey_str_global</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a> directly from a secret key string and the global <a href=\"secp256k1/global/static.SECP256K1.html\" title=\"static secp256k1::global::SECP256K1\"><code>SECP256K1</code></a> context.</p>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<p><a href=\"secp256k1/enum.Error.html#variant.InvalidSecretKey\" title=\"variant secp256k1::Error::InvalidSecretKey\"><code>Error::InvalidSecretKey</code></a> if corresponding public key for the provided secret key is not even.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.secret_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#934-936\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.secret_bytes\" class=\"fn\">secret_bytes</a>(&amp;self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the secret bytes for this key pair.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tweak_add_assign\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#942-949\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.tweak_add_assign\" class=\"fn\">tweak_add_assign</a>&lt;C: <a class=\"trait\" href=\"secp256k1/trait.Verification.html\" title=\"trait secp256k1::Verification\">Verification</a>&gt;(\n    &amp;mut self,\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    tweak: &amp;<a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated since 0.23.0: Use add_xonly_tweak instead</span></div></span></summary><div class=\"docblock\"><p>Tweaks a keypair by adding the given tweak to the secret key and updating the public key\naccordingly.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_xonly_tweak\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#976-993\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.add_xonly_tweak\" class=\"fn\">add_xonly_tweak</a>&lt;C: <a class=\"trait\" href=\"secp256k1/trait.Verification.html\" title=\"trait secp256k1::Verification\">Verification</a>&gt;(\n    self,\n    secp: &amp;<a class=\"struct\" href=\"secp256k1/struct.Secp256k1.html\" title=\"struct secp256k1::Secp256k1\">Secp256k1</a>&lt;C&gt;,\n    tweak: &amp;<a class=\"struct\" href=\"secp256k1/scalar/struct.Scalar.html\" title=\"struct secp256k1::scalar::Scalar\">Scalar</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>, <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tweaks a keypair by first converting the public key to an xonly key and tweaking it.</p>\n<h5 id=\"errors-3\"><a href=\"#errors-3\">Errors</a></h5>\n<p>Returns an error if the resulting key would be invalid.</p>\n<p>NB: Will not error if the tweaked public key has an odd value and canโt be used for\nBIP 340-342 purposes.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>secp256k1::{Secp256k1, KeyPair, Scalar};\n<span class=\"kw\">use </span>secp256k1::rand::{RngCore, thread_rng};\n\n<span class=\"kw\">let </span>secp = Secp256k1::new();\n<span class=\"kw\">let </span>tweak = Scalar::random();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>key_pair = KeyPair::new(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;mut </span>thread_rng());\n<span class=\"kw\">let </span>tweaked = key_pair.add_xonly_tweak(<span class=\"kw-2\">&amp;</span>secp, <span class=\"kw-2\">&amp;</span>tweak).expect(<span class=\"string\">\"Improbable to fail with a randomly generated tweak\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.secret_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#999-1001\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.secret_key\" class=\"fn\">secret_key</a>(&amp;self) -&gt; <a class=\"struct\" href=\"secp256k1/struct.SecretKey.html\" title=\"struct secp256k1::SecretKey\">SecretKey</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/struct.SecretKey.html\" title=\"struct secp256k1::SecretKey\"><code>SecretKey</code></a> for this <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a>.</p>\n<p>This is equivalent to using <a href=\"secp256k1/struct.SecretKey.html#method.from_keypair\" title=\"associated function secp256k1::SecretKey::from_keypair\"><code>SecretKey::from_keypair</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1007-1009\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.public_key\" class=\"fn\">public_key</a>(&amp;self) -&gt; <a class=\"struct\" href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\">PublicKey</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/struct.PublicKey.html\" title=\"struct secp256k1::PublicKey\"><code>PublicKey</code></a> for this <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a>.</p>\n<p>This is equivalent to using <a href=\"secp256k1/struct.PublicKey.html#method.from_keypair\" title=\"associated function secp256k1::PublicKey::from_keypair\"><code>PublicKey::from_keypair</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.x_only_public_key\" class=\"method\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1015-1017\">source</a><h4 class=\"code-header\">pub fn <a href=\"secp256k1/struct.KeyPair.html#tymethod.x_only_public_key\" class=\"fn\">x_only_public_key</a>(&amp;self) -&gt; (<a class=\"struct\" href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\">XOnlyPublicKey</a>, <a class=\"enum\" href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\">Parity</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"secp256k1/struct.XOnlyPublicKey.html\" title=\"struct secp256k1::XOnlyPublicKey\"><code>XOnlyPublicKey</code></a> (and itโs <a href=\"secp256k1/enum.Parity.html\" title=\"enum secp256k1::Parity\"><code>Parity</code></a>) for this <a href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\"><code>KeyPair</code></a>.</p>\n<p>This is equivalent to using <a href=\"secp256k1/struct.XOnlyPublicKey.html#method.from_keypair\" title=\"associated function secp256k1::XOnlyPublicKey::from_keypair\"><code>XOnlyPublicKey::from_keypair</code></a>.</p>\n</div></details></div></details>",0,"secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-PartialOrd-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","secp256k1::schnorrsig::KeyPair"],["<section id=\"impl-StructuralEq-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-StructuralEq-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section>","StructuralEq","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#810\">source</a><a href=\"#impl-Debug-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#810\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-Clone-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-PartialEq-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-Hash-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#method.hash\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","secp256k1::schnorrsig::KeyPair"],["<section id=\"impl-Copy-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-Copy-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section>","Copy","secp256k1::schnorrsig::KeyPair"],["<section id=\"impl-StructuralPartialEq-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-StructuralPartialEq-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section>","StructuralPartialEq","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1056-1072\">source</a><a href=\"#impl-FromStr-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"enum\" href=\"secp256k1/enum.Error.html\" title=\"enum secp256k1::Error\">Error</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#1059-1071\">source</a><a href=\"#method.from_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","secp256k1::schnorrsig::KeyPair"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-Ord-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","secp256k1::schnorrsig::KeyPair"],["<section id=\"impl-Eq-for-KeyPair\" class=\"impl\"><a class=\"src rightside\" href=\"src/secp256k1/key.rs.html#808\">source</a><a href=\"#impl-Eq-for-KeyPair\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"secp256k1/struct.KeyPair.html\" title=\"struct secp256k1::KeyPair\">KeyPair</a></h3></section>","Eq","secp256k1::schnorrsig::KeyPair"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()